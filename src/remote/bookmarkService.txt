import { COLLECTIONS } from '@/utils/constants'
import {
  collection,
  deleteDoc,
  doc,
  getDoc,
  getDocs,
  orderBy,
  query,
  setDoc,
  where,
} from '@firebase/firestore'
import { db } from '../../firebase'
import { BookMarkProps, PostProps } from '@/utils/types'

export async function getBooks({
  userId,
  postId,
}: {
  userId?: string
  postId?: string
}): Promise<BookMarkProps[]> {
  const snapShot = await getDocs(
    query(
      collection(db, COLLECTIONS.BOOKMARK),
      where('userId', '==', userId),
      orderBy('createdAt', 'desc'),
    ),
  )

  return snapShot.docs.map(doc => ({
    postId: doc.id,
    ...(doc.data() as Omit<BookMarkProps, 'postId'>),
  }))
}

// export async function getMyBookmark({
//   bookmarkId,
//   userId,
// }: {
//   bookmarkId?: string
//   userId?: string
// }): Promise<BookMarkProps[]> {
//   if (!userId) {
//     throw new Error('User ID is required to fetch bookmarks.')
//   }

//   const constants = [where('userId', '==', userId)]

//   if (bookmarkId) {
//     constants.push(where('bookmarkId', '==', bookmarkId))
//   }

//   const bookQuery = query(
//     collection(db, COLLECTIONS.BOOKMARK),
//     ...constants,
//     orderBy('createdAt', 'desc'),
//   )

//   const bookSnap = await getDocs(bookQuery)

//   return bookSnap.docs.map(async doc => {
//     const bookmark = doc.data() as BookMarkProps

//     const postSnap = await getDoc(doc(db, COLLECTIONS.POST, bookmark.postId))
//     const post = postSnap.exists() ? postSnap.data() : null

//     return {
//       ...bookmark,
//       post,
//       bookmarkId: doc.id,
//     }
//   })
// }

export async function getMyBookmark({
  userId,
}: {
  userId?: string
}): Promise<BookMarkProps[]> {
  if (!userId) {
    throw new Error('User ID is required to fetch bookmarks.')
  }

  const bookQuery = query(
    collection(db, COLLECTIONS.BOOKMARK),
    where('userId', '==', userId),
    orderBy('createdAt', 'desc'),
  )

  const bookSnap = await getDocs(bookQuery)
  return bookSnap.docs
    .map(doc => {
      const bookmark = doc.data() as BookMarkProps

      if (bookmark.postId) {
        return {
          ...bookmark,
          postId: doc.id,
        }
      }

      return null // postId 없는 경우
    })
    .filter(Boolean) as BookMarkProps[] // null 값 제거
}

export async function toggleBook({
  post,
  userId,
}: {
  post: Pick<PostProps, 'postId'>
  userId: string
}) {
  const bookmarkId = `${userId}_${post.postId}`

  const findSnap = await getDocs(
    query(
      collection(db, COLLECTIONS.BOOKMARK),
      where('bookmarkId', '==', bookmarkId),
    ),
  )

  if (findSnap.docs.length > 0) {
    return deleteDoc(findSnap.docs[0].ref)
  } else {
    const newBook = {
      postId: post.postId,
      bookmarkId,
      userId,
      createdAt: new Date().toLocaleDateString('en', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      }),
    }

    return setDoc(doc(db, COLLECTIONS.BOOKMARK, bookmarkId), newBook)
  }
}
